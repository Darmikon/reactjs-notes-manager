//for forced flex mode
$global-flexbox-forced: false !default;
$grid-row-class-name-flex: 'f-row' !default;
$grid-column-class-name-flex: 'f-col' !default;

$f-row: #{$grid-row-class-name-flex};
$f-col: #{$grid-column-class-name-flex};

@mixin foundation-flex-grid-forced {
  //to restrict flex grid to specific container - we must place all further logic into container wrapper
  //.flex-container {
  //  //...
  //}
  // Row
  .#{$f-row} {
    @include flex-grid-row;

    // Nesting behavior
    & & {
      @include flex-grid-row(nest, $base: false);
    }

    // Expanded row
    &.expanded {
      max-width: none;
    }

    &.collapse {
      > .#{$f-col} {
        @include grid-col-collapse;
      }
    }
  }

  // Column
  .#{$f-col} {
    @include flex-grid-column;
  }

  // Column row
  // The double .row class is needed to bump up the specificity
  .#{$f-col}.#{$f-row}.#{$f-row} {
    float: none;
    display: block;

    // To properly nest a column row, padding and margin is removed
    .#{$f-row} & {
      padding-left: 0;
      padding-right: 0;
      margin-left: 0;
      margin-right: 0;
    }
  }

  @include -zf-each-breakpoint {
    @for $i from 1 through $grid-column-count {
      // Sizing (percentage)
      .f-#{$-zf-size}-#{$i} {
        flex: flex-grid-column($i);
        max-width: grid-column($i);
      }

      // Offsets
      $o: $i - 1;

      .f-#{$-zf-size}-offset-#{$o} {
        @include grid-column-offset($o);
      }
    }

    // Source ordering
    @for $i from 1 through 6 {
      .f-#{$-zf-size}-order-#{$i} {
        @include flex-order($i);
      }
    }

    // Block grid
    @for $i from 1 through $block-grid-max {
      .f-#{$-zf-size}-up-#{$i} {
        @include flex-grid-layout($i);
      }
    }

    @if $-zf-size != $-zf-zero-breakpoint {
      // Sizing (expand)
      @include breakpoint($-zf-size) {
        .f-#{$-zf-size}-expand {
          flex: flex-grid-column();
        }
      }

      // Auto-stacking/unstacking
      @at-root (without: media) {
        .#{$f-row}.f-#{$-zf-size}-unstack {
          > .#{$f-col} {
            flex: flex-grid-column(100%);

            @include breakpoint($-zf-size) {
              flex: flex-grid-column();
            }
          }
        }
      }
    }

    // Responsive collapsing
    .f-#{$-zf-size}-collapse {
      > .#{$f-col} {
        @include grid-col-collapse;
      }
    }

    .f-#{$-zf-size}-uncollapse {
      $gutter: -zf-get-bp-val($grid-column-gutter, $-zf-size);

      > .#{$f-col} {
        @include grid-col-uncollapse($gutter);
      }
    }
  }

  // Sizing (shrink)
  .f-shrink {
    flex: flex-grid-column(shrink);
    max-width: 100%;
  }

  // Vertical alignment using align-items and align-self
  // Remove these in 6.3
  @each $vdir, $prop in $-zf-flex-align {
    .#{$f-col}.align-#{$vdir} {
      @include flex-align-self($vdir);
    }
  }

  #{$f-col}s {
    // scss-lint:disable PlaceholderInExtend
    @extend .#{$f-col};
  }
}
